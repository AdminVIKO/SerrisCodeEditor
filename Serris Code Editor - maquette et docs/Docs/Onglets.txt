=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-




Le système d'onglets va fonctionner avec 1 fichier JSON et 1 groupe de fichiers JSON.

=> Le fichier JSON solitaire sera le fichier JSON mère du projet: il va contenir les ID et les informations nécessaires aux onglets qui ont été ouverts par l'utilisateur.
Il permettra aussi de savoir quel fichier dans le groupe de fichiers JSON contient le code de l'onglet.

=> Le groupe de fichiers JSON correspond aux codes qui n'ont pas été réellement sauvegardé par l'utilisateur. Le code est séparer du reste car c'est une grosse variable et
quoi doit être ouverte que quand c'est nécessaire (sinon, utilisation de la RAM pour rien).



---------- Architecture des objets "InfosTab" et "ContentTab" ----------



=> Pour "InfosTab":
   -> ID [int]: permet d'identifier un onglet pour ensuite, le retrouver facilement dans le fichier JSON;
   -> PathContent [string]: permet de retrouver le fichier JSON contenant le code "temporaire" de l'onglet;
   -> TabContentType [int / enum]: permet de savoir si cet onglet est un dossier ou bien un fichier seul (0 = fichier & 1 = dossier abritant plusieurs onglets);

   --- Si "TabContentMode" = 1 ---
   -> FolderContent [List<InfosTab>]: permet de connaître les onglets fils de cet onglet (qui est un onglet père car c'est un onglet dossier);

   --- Si "TabContentMode" = 0 ---
   -> TabAccessOriginalContent [string]: permet de savoir le chemin d'accès du fichier original, l'ID du fichier original sur OneDrive...;
   -> TabStorageMode [int / enum]: permet de savoir le "mode" de l'onglet (ex: mode OneDrive, fichiers local etc...) -- 0 = Non enregistré, 1 = Local, 2 = Réseau local, 3 = OneDrive;
   -> TabType [string]: permet de savoir le type de fichier de l'onglet (HTML, CSS, JavaScript, fichier txt...);
   -> TabName [string]: permet de savoir le nom du fichier de l'onglet (avec extension, ex: "toothless.css");
   -> TabEncoding [int]: permet de savoir le type d'encodage du fichier de l'onglet;
   -> TabNewModifications [bool]: permet de savoir si des modifications de l'onglet ont eu lieu;
   -> TabDateModified [string]: permet de savoir la date de modification de l'onglet;
   -> TabCursorPosition [CursorPosition]: permet de connaître la dernière position du curseur dans l'éditeur;

   -> TabContentTemporary [string(tempo) -> null par défaut]: permet de stocker temporairement le contenu de l'onglet (variable qui ne sera pas enregistré dans le fichier JSON);
   -> TabThumbnailTemporary [BitmapImage(tempo) -> null par défaut]: permet de stocker temporairement l'image d'illustration de l'onglet (variable qui ne sera pas enregistré dans le fichier JSON);

   -> CanBeDeleted [bool]: permet de savoir si l'onglet peut-être supprimé ou non;
   -> CanBeModified [bool]: permet de savoir si l'onglet peut-être modifié ou non;


=> Pour "ContentTab":
   -> ID [int]: permet d'identifier le contenu d'un onglet pour ensuite, le retrouver facilement dans le fichier JSON;
   -> Content [string]: contenu de l'onglet;




=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-




Le système d'onglets sera séparé en deux entitées: le système d'onglets "serveur" et le système d'onglets "client".

=> Le système d'onglets "serveur" sera le système qui va gérer les fichiers JSON (pour enregistrer les onglets), s'occupera de la synchronisation entre les systèmes dit "client" ainsi que lire les
fichiers des onglets (que ce soit sur le réseau local, OneDrive, sur le pc...).
Le nom du projet est "Serris Tabs Server" (STS)

=> Le système d'onglets "client" sera le système qui recevra et affichera les onglets pour pouvoir être utilisé dans l'éditeur de code. A chaque modification du contenu d'un onglet, le système 
"client" enverra les infos au système "serveur" pour sauvegarder + synchroniser les onglets (à jour) sur les différentes fenêtres de l'éditeur de code.

Quand l'utilisateur voudra créer/rajouter un fichier, l'information sera d'abord envoyé au serveur pour ensuite être envoyé aux clients.


---------- Mise en place des différents systèmes ----------



=> Pour le système d'onglets "serveur":
   -> Le projet sera dans un projet à part (car c'est un gros composant);
   -> Si le système n'as pas été démarré (car le thread du système n'existe pas), alors il faudra créé un nouveau thread avec ce système;
   -> Quand le thread a été créé, il faudra sauvergardé l'ID de ce dernier afin que les prochaines instances du programme accède au thread et donc, au serveur du système d'onglets;
   -> Il y aura la possibilité de rajouter facilement des moyens de stockage (ex: Dropbox etc...) dans le système d'onglets grâce a un template nommé "DataStorage" qui donnera la possibilité d'écrire/lire
      les fichiers en fonction de leurs stockages;
   -> Pour mettre à jour certains onglets, LINQ (ou JObject pour Json.NET) sera utilisé;


=> Pour le système d'onglets "client":
   -> A chaque changement dans un onglet, tout sera envoyé au serveur grâce aux fonctions fournis par ce dernier;
   -> Les clients recevront une notification lorsqu'il y a eu une màj côté serveur via MvvmLight pour ensuite se mettre à jour;




=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-=-=-=-=-=-==-=-==-=-=-=-==-=-=-=-